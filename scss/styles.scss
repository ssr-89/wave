*,
*::before,
*::after {
  box-sizing: border-box;
}
:root {
  --index: calc(1vw + 1vh);
  --transition: cubic-bezier(0.1, 0.7, 0, 1);
}
body {
  margin: 0;
  padding: 0;
  background-color: #141414;
}
.img {
  vertical-align: top;
  max-width: 100%;
}
#wrapper {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
}
.items {
  display: flex;
  gap: 0.4rem;
  perspective: calc(var(--index) * 35);
  .item {
    &:has(+ :hover) {
      filter: inherit;
      transform: translateZ(calc(var(--index) * 8.5)) rotateY(-35deg);
    }
    &:has(+ * + :hover) {
      filter: inherit;
      transform: translateZ(calc(var(--index) * 5.6)) rotateY(-40deg);
    }
    &:has(+ * + * + :hover) {
      filter: inherit;
      transform: translateZ(calc(var(--index) * 2.4)) rotateY(-30deg);
    }
    &:has(+ * + * + * + :hover) {
      filter: inherit;
      transform: translateZ(calc(var(--index) * 0.6)) rotateY(-14deg);
    }
    &:hover {
      filter: inherit;
      transform: translateZ(calc(var(--index) * 10));
      & + * {
        filter: inherit;
        transform: translateZ(calc(var(--index) * 8.5)) rotateY(35deg);
        z-index: -1;
        & + * {
          filter: inherit;
          transform: translateZ(calc(var(--index) * 5.6)) rotateY(40deg);
          z-index: -2;
          & + * {
            filter: inherit;
            transform: translateZ(calc(var(--index) * 2.4)) rotateY(30deg);
            z-index: -3;
            & + * {
              filter: inherit;
              transform: translateZ(calc(var(--index) * 0.6)) rotateY(14deg);
              z-index: -4;
            }
          }
        }
      }
    }
    &:focus,
    &:active {
      margin: 0 0.45vw;
      width: 28vw;
      filter: inherit;
      z-index: 100;
      transform: translateZ(calc(var(--index) * 10));
    }
    position: relative;
    width: calc(var(--index) * 5);
    height: calc(var(--index) * 20);
    background-color: #222;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    cursor: pointer;
    filter: grayscale(1) brightness(0.5);
    transition:
      transform 1.25s var(--transition),
      filter 3s var(--transition),
      width 1.25s var(--transition);
    will-change: transform, filter; /* говорит браузеру, чтобы уделял больше ресурсов и работал без лагов */
    &::before,
    &::after {
      content: "";
      position: absolute;
      right: calc(var(--index) * -1);
      width: 20px;
      height: 100%;
    }
    &::after {
      left: calc(var(--index) * -1);
    }
  }
}
